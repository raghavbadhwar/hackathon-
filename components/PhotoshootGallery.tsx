import React from 'react';
import type { GeminiResponse } from '../types';

interface PhotoshootGalleryProps {
    originalImage: string | null;
    generatedImage: GeminiResponse | null;
}

const ImageWithBadge: React.FC<{ src: string, alt: string, isAI: boolean }> = ({ src, alt, isAI }) => (
    <div className="aspect-square bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden border relative group">
        <img src={src} alt={alt} className="max-h-full max-w-full object-contain" />
        {isAI && (
            <div className="absolute bottom-2 right-2">
                <div className="relative group/tooltip">
                    <span className="bg-black/60 text-white text-xs font-semibold px-2 py-1 rounded-md">AI-EDITED</span>
                    <div className="absolute bottom-full mb-2 right-0 w-48 bg-gray-800 text-white text-xs rounded py-1 px-2 text-center opacity-0 group-hover/tooltip:opacity-100 transition-opacity duration-300 pointer-events-none">
                        This image was generated by AI and includes a SynthID watermark.
                        <div className="absolute top-full right-4 w-0 h-0 border-x-4 border-x-transparent border-t-4 border-t-gray-800"></div>
                    </div>
                </div>
            </div>
        )}
    </div>
);

export const PhotoshootGallery: React.FC<PhotoshootGalleryProps> = ({ originalImage, generatedImage }) => {
    if (!originalImage) {
        return (
            <div className="bg-white p-6 rounded-xl shadow-md border border-gray-200 text-center text-gray-500">
                No images are available for this product yet. Use the AI Photoshoot tool to create one.
            </div>
        );
    }

    const hasGeneratedImages = generatedImage && generatedImage.imageUrls && generatedImage.imageUrls.length > 0;

    const imageList = [
        { src: originalImage, alt: 'Original product', isAI: false },
        ...(hasGeneratedImages ? generatedImage.imageUrls.map((url) => ({ src: url, alt: 'AI generated scene', isAI: true })) : [])
    ];

    return (
        <div className={`grid gap-4 grid-cols-1 ${hasGeneratedImages ? 'sm:grid-cols-2' : ''}`}>
            {imageList.map((img, index) => (
                <ImageWithBadge key={index} src={img.src} alt={img.alt} isAI={img.isAI} />
            ))}
        </div>
    );
};